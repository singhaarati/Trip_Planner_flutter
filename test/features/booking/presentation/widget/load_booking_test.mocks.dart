// Mocks generated by Mockito 5.4.2 from annotations
// in trip_planner/test/features/booking/presentation/widget/load_booking_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trip_planner/core/failure/failure.dart' as _i6;
import 'package:trip_planner/features/booking/domain/entity/booking_entity.dart'
    as _i7;
import 'package:trip_planner/features/booking/domain/repository/booking_repository.dart'
    as _i2;
import 'package:trip_planner/features/booking/domain/use_case/booking_use_case.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIBookingRepository_0 extends _i1.SmartFake
    implements _i2.IBookingRepository {
  _FakeIBookingRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BookingUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookingUseCase extends _i1.Mock implements _i4.BookingUseCase {
  @override
  _i2.IBookingRepository get bookingRepository => (super.noSuchMethod(
        Invocation.getter(#bookingRepository),
        returnValue: _FakeIBookingRepository_0(
          this,
          Invocation.getter(#bookingRepository),
        ),
        returnValueForMissingStub: _FakeIBookingRepository_0(
          this,
          Invocation.getter(#bookingRepository),
        ),
      ) as _i2.IBookingRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> createBookingDestinationById(
    _i7.BookingEntity? booking,
    String? destinationId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBookingDestinationById,
          [
            booking,
            destinationId,
          ],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #createBookingDestinationById,
            [
              booking,
              destinationId,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
                _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #createBookingDestinationById,
            [
              booking,
              destinationId,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.BookingEntity>>>
      getAllBookings() => (super.noSuchMethod(
            Invocation.method(
              #getAllBookings,
              [],
            ),
            returnValue: _i5
                .Future<_i3.Either<_i6.Failure, List<_i7.BookingEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.BookingEntity>>(
              this,
              Invocation.method(
                #getAllBookings,
                [],
              ),
            )),
            returnValueForMissingStub: _i5
                .Future<_i3.Either<_i6.Failure, List<_i7.BookingEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.BookingEntity>>(
              this,
              Invocation.method(
                #getAllBookings,
                [],
              ),
            )),
          ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.BookingEntity>>>);
}
